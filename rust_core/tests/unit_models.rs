/// Unit tests for models module
use cyrillic_ime_core::models::{ConversionResult, Profile, Schema, SchemaEntry};
use serde_json;

#[test]
fn test_conversion_result_commit() {
    let result = ConversionResult::commit("„ÅÇ".to_string());

    assert_eq!(result.output, "„ÅÇ");
    assert_eq!(result.buffer, "");
    assert_eq!(result.action, "commit");
}

#[test]
fn test_conversion_result_composing() {
    let result = ConversionResult::composing("–ö".to_string());

    assert_eq!(result.output, "");
    assert_eq!(result.buffer, "–ö");
    assert_eq!(result.action, "composing");
}

#[test]
fn test_conversion_result_clear() {
    let result = ConversionResult::clear();

    assert_eq!(result.output, "");
    assert_eq!(result.buffer, "");
    assert_eq!(result.action, "clear");
}

#[test]
fn test_conversion_result_serialization() {
    let result = ConversionResult::commit("„Åç„ÇÉ".to_string());
    let json = serde_json::to_string(&result).unwrap();

    assert!(json.contains(r#""output":"„Åç„ÇÉ""#));
    assert!(json.contains(r#""buffer":"""#));
    assert!(json.contains(r#""action":"commit""#));
}

#[test]
fn test_conversion_result_deserialization() {
    let json = r#"{"output":"„Åç„ÇÉ","buffer":"","action":"commit"}"#;
    let result: ConversionResult = serde_json::from_str(json).unwrap();

    assert_eq!(result.output, "„Åç„ÇÉ");
    assert_eq!(result.buffer, "");
    assert_eq!(result.action, "commit");
}

#[test]
fn test_profile_deserialization() {
    let json = r#"{
        "id": "rus_standard",
        "name_ja": "„É≠„Ç∑„Ç¢Ë™û (Ê®ôÊ∫ñ)",
        "name_en": "Russian (Standard)",
        "keyboardLayout": ["–ê", "–ë", "–í"],
        "inputSchemaId": "schema_rus_v1"
    }"#;

    let profile: Profile = serde_json::from_str(json).unwrap();

    assert_eq!(profile.id, "rus_standard");
    assert_eq!(profile.name_ja, "„É≠„Ç∑„Ç¢Ë™û (Ê®ôÊ∫ñ)");
    assert_eq!(profile.name_en, "Russian (Standard)");
    assert_eq!(profile.keyboard_layout.len(), 3);
    assert_eq!(profile.keyboard_layout[0], "–ê");
    assert_eq!(profile.input_schema_id, "schema_rus_v1");
}

#[test]
fn test_profile_serialization() {
    let profile = Profile {
        id: "test_profile".to_string(),
        name_ja: "„ÉÜ„Çπ„Éà".to_string(),
        name_en: "Test".to_string(),
        keyboard_layout: vec!["–ê".to_string(), "–ë".to_string()],
        input_schema_id: "test_schema".to_string(),
    };

    let json = serde_json::to_string(&profile).unwrap();
    let deserialized: Profile = serde_json::from_str(&json).unwrap();

    assert_eq!(deserialized.id, profile.id);
    assert_eq!(deserialized.name_ja, profile.name_ja);
    assert_eq!(deserialized.keyboard_layout, profile.keyboard_layout);
}

#[test]
fn test_schema_entry_deserialization() {
    let json = r#"{"kana_key": "kya"}"#;
    let entry: SchemaEntry = serde_json::from_str(json).unwrap();

    assert_eq!(entry.kana_key, "kya");
}

#[test]
fn test_schema_deserialization() {
    let json = r#"{
        "–ê": {"kana_key": "a"},
        "–ö–Ø": {"kana_key": "kya"}
    }"#;

    let schema: Schema = serde_json::from_str(json).unwrap();

    assert_eq!(schema.len(), 2);
    assert_eq!(schema.get("–ê").unwrap().kana_key, "a");
    assert_eq!(schema.get("–ö–Ø").unwrap().kana_key, "kya");
}

#[test]
fn test_schema_empty() {
    let json = r#"{}"#;
    let schema: Schema = serde_json::from_str(json).unwrap();

    assert_eq!(schema.len(), 0);
}

#[test]
fn test_profile_with_large_keyboard_layout() {
    let mut layout = Vec::new();
    for i in 0..100 {
        layout.push(format!("Key{}", i));
    }

    let profile = Profile {
        id: "large_profile".to_string(),
        name_ja: "Â§ß„Åç„ÅÑ„Éó„É≠„Éï„Ç°„Ç§„É´".to_string(),
        name_en: "Large Profile".to_string(),
        keyboard_layout: layout.clone(),
        input_schema_id: "large_schema".to_string(),
    };

    assert_eq!(profile.keyboard_layout.len(), 100);
    assert_eq!(profile.keyboard_layout[0], "Key0");
    assert_eq!(profile.keyboard_layout[99], "Key99");
}

#[test]
fn test_conversion_result_with_empty_strings() {
    let result = ConversionResult {
        output: "".to_string(),
        buffer: "".to_string(),
        action: "clear".to_string(),
    };

    let json = serde_json::to_string(&result).unwrap();
    let deserialized: ConversionResult = serde_json::from_str(&json).unwrap();

    assert_eq!(deserialized.output, "");
    assert_eq!(deserialized.buffer, "");
    assert_eq!(deserialized.action, "clear");
}

#[test]
fn test_profile_with_unicode_characters() {
    let profile = Profile {
        id: "unicode_profile".to_string(),
        name_ja: "Êó•Êú¨Ë™û„ÉÜ„Çπ„Éàüéå".to_string(),
        name_en: "Unicode Test üá∑üá∫".to_string(),
        keyboard_layout: vec!["–ê".to_string(), "üî§".to_string()],
        input_schema_id: "unicode_schema".to_string(),
    };

    let json = serde_json::to_string(&profile).unwrap();
    let deserialized: Profile = serde_json::from_str(&json).unwrap();

    assert_eq!(deserialized.name_ja, profile.name_ja);
    assert_eq!(deserialized.name_en, profile.name_en);
}

#[test]
fn test_schema_with_complex_keys() {
    let json = r#"{
        "–î–ñ–¨–Ø": {"kana_key": "ja"},
        "–©–¨–Æ–Å": {"kana_key": "complex"}
    }"#;

    let schema: Schema = serde_json::from_str(json).unwrap();

    assert!(schema.contains_key("–î–ñ–¨–Ø"));
    assert!(schema.contains_key("–©–¨–Æ–Å"));
    assert_eq!(schema.get("–î–ñ–¨–Ø").unwrap().kana_key, "ja");
}
